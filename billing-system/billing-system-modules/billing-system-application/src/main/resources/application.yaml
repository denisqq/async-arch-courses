spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://auth-server:9000
      client:
        registration:
          billing-system-oidc:
            provider: spring
            client-id: billing-system
            client-secret: secret2
            authorization-grant-type: authorization_code
            redirect-uri: "http://client-server:8080/login/oauth2/code/{registrationId}"
            scope: openid
            client-name: billing-system-oidc
          billing-system-oidc-authorization-code:
            provider: spring
            client-id: billing-system
            client-secret: secret2
            authorization-grant-type: authorization_code
            redirect-uri: "http://client-server:8080/authorized"
            scope: billing.read
            client-name: billing-system-authorization-code
        provider:
          spring:
            issuer-uri: http://auth-server:9000

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
        validator:
          apply_to_ddl: false
        default_schema: billing
  datasource:
    url: "jdbc:postgresql://localhost:5432/postgres"
    username: test
    password: test


  kafka:
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      auto-offset-reset: earliest
      group-id: billing-system
    producer:
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    admin:
      auto-create: true
    bootstrap-servers:
      - localhost:9092
    properties:
      security.protocol: PLAINTEXT
      schema.registry.url: http://localhost:8083
    topics:
      users-lifecycle: users.lifecycle
      task-cud-streaming: tasks.changes.streaming
      task-workflow-events: tasks.workflow

server:
  port: 8080
#  servlet:
#    context-path: "/billing-system/api"

logging:
  level:
    org.springframework.security: trace