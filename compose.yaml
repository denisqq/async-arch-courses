version: "3.7"

networks:
  async-arch:
    driver: host

services:
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
    networks:
      - async-arch
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "29092:29092"
      - "9101:9101"
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - async-arch
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - async-arch

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - async-arch
      # This "container" is a workaround to pre-create topics
      #  kafka-setup:
      #    image: confluentinc/cp-kafka:7.4.0
      #    hostname: kafka-setup
      #    container_name: kafka-setup
      #    networks:
      #      - async-arch
      #    depends_on:
      #      - kafka
      #      - zookeeper
      #    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      #                       cub kafka-ready -b kafka:9093 1 20 && \
      #                       kafka-topics --create --if-not-exists --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --topic {topicname} && \
      #                       echo Waiting 60 seconds for Connect to be ready... && \
      #                       sleep 60'"
      #    environment:
      #      # The following settings are listed here only to satisfy the image's requirements.
      #      # We override the image's `command` anyways, hence this container will not start a kafka.
      #      KAFKA_BROKER_ID: ignored
      #      KAFKA_ZOOKEEPER_CONNECT: ignored
      #      KAFKA_HEAP_OPTS: -Xmx512M -Xms512M

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=test'
      - 'POSTGRES_PASSWORD=test'
      - 'POSTGRES_USER=test'
    ports:
      - '5432:5432'
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - async-arch